// import { Container } from 'inversify';
// import { AuthController /*, Injector as authcontrollerÄ±njector*/ } from '../Controller/auth.controller';
// import { BookController } from '../Controller/book.controller';
// import AuthService from '../Domain/User/Auth.service';
// import BookService from '../Domain/Book/Book.service';
// import BookApplicationService from '../ApplicationService/BookApplicationService';
// import AuthRepository from '../Domain/User/Auth.repository';
// import BookRepository from '../Domain/Book/Book.repository';
// import { AuthApplicationService /*, Injector as authApplicationInjector*/ } from '../ApplicationService/AuthApplicationService';
// import ExecutiveService from '../Domain/Executive/executive.service';
// import { ExecutiveApplicationService } from '../ApplicationService/ExecutiveApplicationService';
// import { ExecutiveController } from '../Controller/executive.controller';
// import { MemberController } from '../Controller/Member.controller';
// import { MemberApplicationService } from '../ApplicationService/MemberApplicationService';
// import MemberService from '../Domain/Member/member.service';
// import MemberRepository from '../Domain/Member/member.repository';
// import TransactionHandler from './Transaction/TransactionManager';
// import { errorHandlerMiddleware } from '../middleware/errorhandlerMiddleware';
// import { container } from 'tsyringe';

// const configurecontainer = (container: Container) => {
//     container.bind<TransactionHandler>(TransactionHandler).to(TransactionHandler);
//     container.bind<AuthApplicationService>(AuthApplicationService).to(AuthApplicationService);
//     container.bind<AuthController>(AuthController).to(AuthController);
//     container.bind<BookController>(BookController).to(BookController);
//     container.bind<AuthService>(AuthService).to(AuthService);
//     container.bind<BookService>(BookService).to(BookService);
//     container.bind<BookApplicationService>(BookApplicationService).to(BookApplicationService);
//     container.bind<AuthRepository>(AuthRepository).to(AuthRepository);
//     container.bind<BookRepository>(BookRepository).to(BookRepository);
//     container.bind<ExecutiveService>(ExecutiveService).to(ExecutiveService);
//     container.bind<ExecutiveApplicationService>(ExecutiveApplicationService).to(ExecutiveApplicationService);
//     container.bind<ExecutiveController>(ExecutiveController).to(ExecutiveController);
//     container.bind<MemberApplicationService>(MemberApplicationService).to(MemberApplicationService);
//     container.bind<MemberController>(MemberController).to(MemberController);
//     container.bind<MemberService>(MemberService).to(MemberService);
//     container.bind<MemberRepository>(MemberRepository).to(MemberRepository);
// };

// export default container;
